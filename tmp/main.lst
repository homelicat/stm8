                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _tim2_update
                                     13 	.globl _rst_get
                                     14 	.globl _millis
                                     15 	.globl _I2C
                                     16 	.globl _EXTI
                                     17 	.globl _UART
                                     18 	.globl _TIM4
                                     19 	.globl _TIM2
                                     20 	.globl _TIM1
                                     21 	.globl _GPIO_D
                                     22 	.globl _GPIO_C
                                     23 	.globl _GPIO_B
                                     24 	.globl _GPIO_A
                                     25 	.globl _CLK
                                     26 	.globl _RST
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area INITIALIZED
      000000                         35 _RST::
      000000                         36 	.ds 2
      000002                         37 _CLK::
      000002                         38 	.ds 2
      000004                         39 _GPIO_A::
      000004                         40 	.ds 2
      000006                         41 _GPIO_B::
      000006                         42 	.ds 2
      000008                         43 _GPIO_C::
      000008                         44 	.ds 2
      00000A                         45 _GPIO_D::
      00000A                         46 	.ds 2
      00000C                         47 _TIM1::
      00000C                         48 	.ds 2
      00000E                         49 _TIM2::
      00000E                         50 	.ds 2
      000010                         51 _TIM4::
      000010                         52 	.ds 2
      000012                         53 _UART::
      000012                         54 	.ds 2
      000014                         55 _EXTI::
      000014                         56 	.ds 2
      000016                         57 _I2C::
      000016                         58 	.ds 2
      000018                         59 _millis::
      000018                         60 	.ds 2
                                     61 ;--------------------------------------------------------
                                     62 ; Stack segment in internal ram 
                                     63 ;--------------------------------------------------------
                                     64 	.area	SSEG
      000000                         65 __start__stack:
      000000                         66 	.ds	1
                                     67 
                                     68 ;--------------------------------------------------------
                                     69 ; absolute external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area DABS (ABS)
                                     72 
                                     73 ; default segment ordering for linker
                                     74 	.area HOME
                                     75 	.area GSINIT
                                     76 	.area GSFINAL
                                     77 	.area CONST
                                     78 	.area INITIALIZER
                                     79 	.area CODE
                                     80 
                                     81 ;--------------------------------------------------------
                                     82 ; interrupt vector 
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME
      000000                         85 __interrupt_vect:
      000000 82v00u00u00             86 	int s_GSINIT ; reset
      000004 82 00 00 00             87 	int 0x000000 ; trap
      000008 82 00 00 00             88 	int 0x000000 ; int0
      00000C 82 00 00 00             89 	int 0x000000 ; int1
      000010 82 00 00 00             90 	int 0x000000 ; int2
      000014 82 00 00 00             91 	int 0x000000 ; int3
      000018 82 00 00 00             92 	int 0x000000 ; int4
      00001C 82 00 00 00             93 	int 0x000000 ; int5
      000020 82 00 00 00             94 	int 0x000000 ; int6
      000024 82 00 00 00             95 	int 0x000000 ; int7
      000028 82 00 00 00             96 	int 0x000000 ; int8
      00002C 82 00 00 00             97 	int 0x000000 ; int9
      000030 82 00 00 00             98 	int 0x000000 ; int10
      000034 82 00 00 00             99 	int 0x000000 ; int11
      000038 82 00 00 00            100 	int 0x000000 ; int12
      00003C 82v00u00u05            101 	int _tim2_update ; int13
                                    102 ;--------------------------------------------------------
                                    103 ; global & static initialisations
                                    104 ;--------------------------------------------------------
                                    105 	.area HOME
                                    106 	.area GSINIT
                                    107 	.area GSFINAL
                                    108 	.area GSINIT
      000000                        109 __sdcc_gs_init_startup:
      000000                        110 __sdcc_init_data:
                                    111 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  112 	ldw x, #l_DATA
      000003 27 07            [ 1]  113 	jreq	00002$
      000005                        114 00001$:
      000005 72 4FuFFuFF      [ 1]  115 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  116 	decw x
      00000A 26 F9            [ 1]  117 	jrne	00001$
      00000C                        118 00002$:
      00000C AEr00r00         [ 2]  119 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  120 	jreq	00004$
      000011                        121 00003$:
      000011 D6uFFuFF         [ 1]  122 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  123 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  124 	decw	x
      000018 26 F7            [ 1]  125 	jrne	00003$
      00001A                        126 00004$:
                                    127 ; stm8_genXINIT() end
                                    128 	.area GSFINAL
      000000 CCr00r40         [ 2]  129 	jp	__sdcc_program_startup
                                    130 ;--------------------------------------------------------
                                    131 ; Home
                                    132 ;--------------------------------------------------------
                                    133 	.area HOME
                                    134 	.area HOME
      000040                        135 __sdcc_program_startup:
      000040 CCr00r17         [ 2]  136 	jp	_main
                                    137 ;	return from main will return to caller
                                    138 ;--------------------------------------------------------
                                    139 ; code
                                    140 ;--------------------------------------------------------
                                    141 	.area CODE
                                    142 ;	src/core.c: 10: uint8_t rst_get()
                                    143 ;	-----------------------------------------
                                    144 ;	 function rst_get
                                    145 ;	-----------------------------------------
      000000                        146 _rst_get:
                                    147 ;	src/core.c: 12: return RST->SR;
      000000 CEu00u00         [ 2]  148 	ldw	x, _RST+0
      000003 F6               [ 1]  149 	ld	a, (x)
                                    150 ;	src/core.c: 13: }
      000004 81               [ 4]  151 	ret
                                    152 ;	src/main.c: 12: void tim2_update(void) __interrupt(13)
                                    153 ;	-----------------------------------------
                                    154 ;	 function tim2_update
                                    155 ;	-----------------------------------------
      000005                        156 _tim2_update:
                                    157 ;	src/main.c: 14: millis+=1;
      000005 CEu00u18         [ 2]  158 	ldw	x, _millis+0
      000008 5C               [ 1]  159 	incw	x
      000009 CFu00u18         [ 2]  160 	ldw	_millis+0, x
                                    161 ;	src/main.c: 15: TIM2->SR1 &= ~TIM_SR1_UIF;
      00000C CEu00u0E         [ 2]  162 	ldw	x, _TIM2+0
      00000F 1C 00 04         [ 2]  163 	addw	x, #0x0004
      000012 F6               [ 1]  164 	ld	a, (x)
      000013 A4 FE            [ 1]  165 	and	a, #0xfe
      000015 F7               [ 1]  166 	ld	(x), a
                                    167 ;	src/main.c: 16: }
      000016 80               [11]  168 	iret
                                    169 ;	src/main.c: 18: void main()
                                    170 ;	-----------------------------------------
                                    171 ;	 function main
                                    172 ;	-----------------------------------------
      000017                        173 _main:
                                    174 ;	src/main.c: 20: CLK->CKDIVR=0;
      000017 CEu00u02         [ 2]  175 	ldw	x, _CLK+0
      00001A 6F 06            [ 1]  176 	clr	(0x0006, x)
                                    177 ;	src/main.c: 21: TIM2->PSCR=7;
      00001C CEu00u0E         [ 2]  178 	ldw	x, _TIM2+0
      00001F A6 07            [ 1]  179 	ld	a, #0x07
      000021 E7 0E            [ 1]  180 	ld	(0x000e, x), a
                                    181 ;	src/main.c: 22: TIM2->ARRH=0;
      000023 CEu00u0E         [ 2]  182 	ldw	x, _TIM2+0
      000026 6F 0F            [ 1]  183 	clr	(0x000f, x)
                                    184 ;	src/main.c: 23: TIM2->ARRL=125;
      000028 CEu00u0E         [ 2]  185 	ldw	x, _TIM2+0
      00002B A6 7D            [ 1]  186 	ld	a, #0x7d
      00002D E7 10            [ 1]  187 	ld	(0x0010, x), a
                                    188 ;	src/main.c: 21: TIM2->PSCR=7;
      00002F CEu00u0E         [ 2]  189 	ldw	x, _TIM2+0
                                    190 ;	src/main.c: 24: TIM2->IER|=TIM_IER_UIE;
      000032 1C 00 03         [ 2]  191 	addw	x, #0x0003
      000035 F6               [ 1]  192 	ld	a, (x)
      000036 AA 01            [ 1]  193 	or	a, #0x01
      000038 F7               [ 1]  194 	ld	(x), a
                                    195 ;	src/main.c: 21: TIM2->PSCR=7;
      000039 CEu00u0E         [ 2]  196 	ldw	x, _TIM2+0
                                    197 ;	src/main.c: 25: TIM2->CR1|=TIM_CR1_CEN;
      00003C F6               [ 1]  198 	ld	a, (x)
      00003D AA 01            [ 1]  199 	or	a, #0x01
      00003F F7               [ 1]  200 	ld	(x), a
                                    201 ;	src/main.c: 26: UART_BAUD(9600);
      000040 CEu00u12         [ 2]  202 	ldw	x, _UART+0
      000043 A6 02            [ 1]  203 	ld	a, #0x02
      000045 E7 03            [ 1]  204 	ld	(0x0003, x), a
      000047 CEu00u12         [ 2]  205 	ldw	x, _UART+0
      00004A 5C               [ 1]  206 	incw	x
      00004B 5C               [ 1]  207 	incw	x
      00004C A6 68            [ 1]  208 	ld	a, #0x68
      00004E F7               [ 1]  209 	ld	(x), a
      00004F CEu00u12         [ 2]  210 	ldw	x, _UART+0
                                    211 ;	src/main.c: 27: UART_TEN();
      000052 1C 00 05         [ 2]  212 	addw	x, #0x0005
      000055 F6               [ 1]  213 	ld	a, (x)
      000056 AA 08            [ 1]  214 	or	a, #0x08
      000058 F7               [ 1]  215 	ld	(x), a
                                    216 ;	src/main.c: 26: UART_BAUD(9600);
      000059 CEu00u12         [ 2]  217 	ldw	x, _UART+0
                                    218 ;	src/main.c: 27: UART_TEN();
      00005C 1C 00 05         [ 2]  219 	addw	x, #0x0005
                                    220 ;	src/main.c: 28: UART_REN();
      00005F F6               [ 1]  221 	ld	a, (x)
      000060 AA 04            [ 1]  222 	or	a, #0x04
      000062 F7               [ 1]  223 	ld	(x), a
                                    224 ;	src/main.c: 29: GPIO_OUT(GPIO_B,5);
      000063 CEu00u06         [ 2]  225 	ldw	x, _GPIO_B+0
      000066 5C               [ 1]  226 	incw	x
      000067 5C               [ 1]  227 	incw	x
      000068 F6               [ 1]  228 	ld	a, (x)
      000069 AA 20            [ 1]  229 	or	a, #0x20
      00006B F7               [ 1]  230 	ld	(x), a
                                    231 ;	src/main.c: 30: int_all();
      00006C 9A               [ 1]  232 	rim
                                    233 ;	src/main.c: 31: while(1)
      00006D                        234 00102$:
      00006D 20 FE            [ 2]  235 	jra	00102$
                                    236 ;	src/main.c: 35: }
      00006F 81               [ 4]  237 	ret
                                    238 	.area CODE
                                    239 	.area CONST
                                    240 	.area INITIALIZER
      000000                        241 __xinit__RST:
      000000 50 B3                  242 	.dw #0x50b3
      000002                        243 __xinit__CLK:
      000002 50 C0                  244 	.dw #0x50c0
      000004                        245 __xinit__GPIO_A:
      000004 50 00                  246 	.dw #0x5000
      000006                        247 __xinit__GPIO_B:
      000006 50 05                  248 	.dw #0x5005
      000008                        249 __xinit__GPIO_C:
      000008 50 0A                  250 	.dw #0x500a
      00000A                        251 __xinit__GPIO_D:
      00000A 50 0F                  252 	.dw #0x500f
      00000C                        253 __xinit__TIM1:
      00000C 52 50                  254 	.dw #0x5250
      00000E                        255 __xinit__TIM2:
      00000E 53 00                  256 	.dw #0x5300
      000010                        257 __xinit__TIM4:
      000010 53 40                  258 	.dw #0x5340
      000012                        259 __xinit__UART:
      000012 52 30                  260 	.dw #0x5230
      000014                        261 __xinit__EXTI:
      000014 50 A0                  262 	.dw #0x50a0
      000016                        263 __xinit__I2C:
      000016 52 10                  264 	.dw #0x5210
      000018                        265 __xinit__millis:
      000018 00 00                  266 	.dw #0x0000
                                    267 	.area CABS (ABS)
